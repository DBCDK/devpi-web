diff --git a/devpi_common/metadata.py b/devpi_common/metadata.py
index e1254f21..f01b8d53 100644
--- a/devpi_common/metadata.py
+++ b/devpi_common/metadata.py
@@ -2,6 +2,9 @@ import posixpath
 import re
 from packaging.version import parse as parse_version
 from packaging.requirements import Requirement as BaseRequirement
+from packaging.version import InvalidVersion
+from packaging.version import Version as PackagingVersion
+from packaging.version import parse as orig_parse_version
 from .types import CompareMixin
 from .types import cached_property
 from .validation import normalize_name
@@ -11,7 +14,69 @@ ALLOWED_ARCHIVE_EXTS = set(
     ".dmg .deb .msi .rpm .exe .egg .whl .tar.gz "
     ".tar.bz2 .tar .tgz .zip .doc.zip".split())
 
-
+class LegacyVersion(object):
+    # "naturally" sorted and always smaller than a valid version
+    __slots__ = ('_value', 'cmpval')
+
+    def __init__(self, version):
+        self._value = version
+        self.cmpval = tuple(
+            (int(n) if n != '' else 0, a)
+            for n, a in re.findall(r'(\d*)([^\d]*)', version))
+
+    def __lt__(self, other):
+        if isinstance(other, PackagingVersion):
+            # always smaller
+            return True
+        if isinstance(other, LegacyVersion):
+            return self.cmpval < other.cmpval
+        return NotImplemented
+
+    def __le__(self, other):
+        if isinstance(other, PackagingVersion):
+            # always smaller or equal
+            return True
+        if isinstance(other, LegacyVersion):
+            return self.cmpval <= other.cmpval
+        return NotImplemented
+
+    def __eq__(self, other):
+        if isinstance(other, PackagingVersion):
+            # never equal
+            return False
+        if isinstance(other, LegacyVersion):
+            return self.cmpval == other.cmpval
+        return NotImplemented
+
+    def __ne__(self, other):
+        if isinstance(other, PackagingVersion):
+            # never equal
+            return True
+        if isinstance(other, LegacyVersion):
+            return self.cmpval != other.cmpval
+        return NotImplemented
+
+    def __ge__(self, other):
+        if isinstance(other, PackagingVersion):
+            # never greater or equal
+            return False
+        if isinstance(other, LegacyVersion):
+            return self.cmpval >= other.cmpval
+        return NotImplemented
+
+    def __gt__(self, other):
+        if isinstance(other, PackagingVersion):
+            # never greater
+            return False
+        if isinstance(other, LegacyVersion):
+            return self.cmpval > other.cmpval
+        return NotImplemented
+
+def parse_version(version):
+    try:
+        return orig_parse_version(version)
+    except InvalidVersion:
+        return LegacyVersion(version)
 _releasefile_suffix_rx = re.compile(
     r"(\.deb|\.dmg|\.msi|\.zip|\.tar\.gz|\.tgz|\.tar\.bz2|"
     r"\.doc\.zip|"

